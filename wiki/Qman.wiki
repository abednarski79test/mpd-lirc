#summary Description of Qman application

= Introduction =

This project represents backend implementaiton of social queueing application.
It's one of the project implemented in http://www.codeforireland.com/ 

= Implementation =

Code is implemented using Java with Spring Framework (web serviced and persistence), MySql database.

= Algorythm =

TODO

= Deployment =

Application is build using maven:
{{{
maven install
}}}
the result is war file in targer folder which needs to be deployed in the web server.

= Configuration of web server =

1) Set timezone to UTC:

a) in linux (or windows cygwin) for tomcat 7 - go to bin folder and create file setenv.sh with content:
{{{CATALINA_OPTS=-Duser.timezone=UTC}}}

b) for windows: TODO

Note:
All dates and calculations in the application are based on UTC and not local time.
It is responsibility of the client to convert dates to local time zone. 

2) Set DB credentials:

a) in linux (or windows cygwin) for tomcat 7 - go to conf folder and add at the end of catalina.properties content:

{{{JDBC_DRIVERCLASSNAME=com.mysql.jdbc.Driver
JDBC_URL=jdbc:mysql://aau6ndaifwgmwc.cauo0pvrpodt.eu-west-1.rds.amazonaws.com:3306/ebdb
JDBC_USERNAME=<USER>
JDBC_PASSWORD=<PASSWORD>}}}

b) in windows: TODO

= API =

The communication with the backend is provided using JSON format.
List of the API supported by the application - examples presented using CURL application

* get list of queues
{{{
curl -i -H \
	"Content-Type: application/json" \
	-X GET \
	http://localhost:8080/Qman/queues
}}}

* get queue details
{{{
curl -i -H \
	"Content-Type: application/json" \
	-X GET \
	http://localhost:8080/Qman/queues/3/details
}}}

* get queue details (depracated)
{{{
curl -i -H \
	"Content-Type: application/json" \
	-X GET \
	http://localhost:8080/Qman/queues/3
}}}

* get queue stats
{{{
curl -i -H \
	"Content-Type: application/json" \
	-X GET \
	http://localhost:8080/Qman/queues/3/stats
}}}

* get client status
{{{
curl -i -H \
	"Content-Type: application/json" \
	-X GET \
	http://localhost:8080/Qman/queues/3/tickets/2
}}}

* post client update
{{{
curl -i -H \
	"Content-Type: application/json" \
	-X POST -d '{"servicedTicketNumber":"117"}' \
	http://localhost:8080/Qman/queues/3/tickets/1
}}}

* configuration
{{{
// flush all the caches in the application
curl -i -H \
	"Content-Type: application/json" \
	-X GET \
	http://localhost:8080/Qman/resetCaches
}}}

* post feedback
{{{
curl -i -H \
	"Content-Type: application/json" \
	-X POST -d '{"rating":"1"}' \
	http://localhost:8080/Qman/feedbacks
}}}	

= DB structure =

TODO

= Adding new queue =

There are 2 parts which needs to be accomplished to add new queue:
1) db configuration

2) static files configuration (images)

Example of script allowing for converting high resolution image to the required formats using image-magic tool:
{{{
$ identify source.jpg
source.jpg JPEG 640x232+0+0 DirectClass 8-bit 124.7K 0.000u 0:01

$ cp source.jpg 3_xs@2x.jpg

$ gm convert -size 1396x506 source.jpg     -resize 1396x506 -background black     -compose Copy -gravity center     -extent 1396x506     -quality 30 1_lg@2x.jpg

$ gm convert -size 1024x371 source.jpg     -resize 1024x371 -background black     -compose Copy -gravity center     -extent 1024x371     -quality 30 3_md@2x.jpg

$ gm convert -size 800x290 source.jpg     -resize 800x290 -background black     -compose Copy -gravity center     -extent 800x290     -quality 30 3_sm@2x.jpg

$ gm convert -size 400x145 source.jpg     -resize 400x145 -background black     -compose Copy -gravity center     -extent 400x145     -quality 30 3_sm.jpg
}}}

 